import os
import base64
import subprocess

folder_path = f'modules/translation'

file_data = [
    ('data_models.py', 'aW1wb3J0IHRvcmNoCmZyb20gcHlkYW50aWMgaW1wb3J0IEJhc2VNb2RlbApmcm9tIHR5cGluZyBpbXBvcnQgVW5pb24sIE9wdGlvbmFsLCBBbnkKCmZyb20gZGF0YV9tb2RlbHMgaW1wb3J0IEJhc2VNaW5lciwgQmFzZU1vZHVsZSwgTW9kdWxlQ29uZmlnLCBNaW5lclJlcXVlc3QsIGFwcCwgTWluZXJDb25maWcsIFNzNThLZXkKCgpUQVNLX1NUUklOR1MgPSB7CiAgICAic3BlZWNoMnRleHQiOiAiczJ0dCIsCiAgICAic3BlZWNoMnNwZWVjaCI6ICJzMnN0IiwKICAgICJhdXRvX3NwZWVjaF9yZWNvZ25pdGlvbiI6ICJhc3IiLAogICAgInRleHQyc3BlZWNoIjogInQyc3QiLAogICAgInRleHQydGV4dCI6ICJ0MnR0IiwKfQoKVEFSR0VUX0xBTkdVQUdFUyA9IHsKICAgICJFbmdsaXNoIjogImVuZyIsCiAgICAiQWZyaWthYW5zIjogImFmciIsCiAgICAiQW1oYXJpYyI6ICJhbWgiLAogICAgIk1vZGVybiBTdGFuZGFyZCBBcmFiaWMiOiAiYXJiIiwKICAgICJNb3JvY2NhbiBBcmFiaWMiOiAiYXJ5IiwKICAgICJFZ3lwdGlhbiBBcmFiaWMiOiAiYXJ6IiwKICAgICJBc3NhbWVzZSI6ICJhc20iLAogICAgIkFzdHVyaWFuIjogImFzdCIsCiAgICAiTm9ydGggQXplcmJhaWphbmkiOiAiYXpqIiwKICAgICJCZWxhcnVzaWFuIjogImJlbCIsCiAgICAiQmVuZ2FsaSI6ICJiZW4iLAogICAgIkJvc25pYW4iOiAiYm9zIiwKICAgICJCdWxnYXJpYW4iOiAiYnVsIiwKICAgICJDYXRhbGFuIjogImNhdCIsCiAgICAiQ2VidWFubyI6ICJjZWIiLAogICAgIkN6ZWNoIjogImNlcyIsCiAgICAiQ2VudHJhbCI6ICJja2IiLAogICAgIk1hbmRhcmluIENoaW5lc2UiOiAiY21uIiwKICAgICJNYW5kYXJpbiBDaGluZXNlIEhhbnQiOiAiY21uX0hhbnQiLAogICAgIldlbHNoIjogImN5bSIsCiAgICAiRGFuaXNoIjogImRhbiIsCiAgICAiR2VybWFuIjogImRldSIsCiAgICAiRXN0b25pYW4iOiAiZXN0IiwKICAgICJCYXNxdWUiOiAiZXVzIiwKICAgICJGaW5uaXNoIjogImZpbiIsCiAgICAiRnJlbmNoIjogImZyYSIsCiAgICAiTmlnZXJpYW4gRnVsZnVsZGUiOiAiZnV2IiwKICAgICJXZXN0IENlbnRyYWwgT3JvbW8iOiAiZ2F6IiwKICAgICJJcmlzaCI6ICJnbGUiLAogICAgIkdhbGljaWFuIjogImdsZyIsCiAgICAiR3VqYXJhdGkiOiAiZ3VqIiwKICAgICJIZWJyZXciOiAiaGViIiwKICAgICJIaW5kaSI6ICJoaW4iLAogICAgIkNyb2F0aWFuIjogImhydiIsCiAgICAiSHVuZ2FyaWFuIjogImh1biIsCiAgICAiQXJtZW5pYW4iOiAiaHllIiwKICAgICJJZ2JvIjogImlibyIsCiAgICAiSW5kb25lc2lhbiI6ICJpbmQiLAogICAgIkljZWxhbmRpYyI6ICJpc2wiLAogICAgIkl0YWxpYW4iOiAiaXRhIiwKICAgICJKYXZhbmVzZSI6ICJqYXYiLAogICAgIkphcGFuZXNlIjogImpwbiIsCiAgICAiS2FtYmEiOiAia2FtIiwKICAgICJLYW5uYWRhIjogImthbiIsCiAgICAiR2VvcmdpYW4iOiAia2F0IiwKICAgICJLYXpha2giOiAia2F6IiwKICAgICJLYWJ1dmVyZGlhbnUiOiAia2VhIiwKICAgICJIYWxoIE1vbmdvbGlhbiI6ICJraGsiLAogICAgIktobWVyIjogImtobSIsCiAgICAiS3lyZ3l6IjogImtpciIsCiAgICAiS29yZWFuIjogImtvciIsCiAgICAiTGFvIjogImxhbyIsCiAgICAiTGl0aHVhbmlhbiI6ICJsaXQiLAogICAgIkx1eGVtYm91cmdpc2giOiAibHR6IiwKICAgICJHYW5kYSI6ICJsdWciLAogICAgIkx1byI6ICJsdW8iLAogICAgIlN0YW5kYXJkIExhdHZpYW4iOiAibHZzIiwKICAgICJNYWl0aGlsaSI6ICJtYWkiLAogICAgIk1hbGF5YWxhbSI6ICJtYWwiLAogICAgIk1hcmF0aGkiOiAibWFyIiwKICAgICJNYWNlZG9uaWFuIjogIm1rZCIsCiAgICAiTWFsdGVzZSI6ICJtbHQiLAogICAgIk1laXRlaSI6ICJtbmkiLAogICAgIkJ1cm1lc2UiOiAibXlhIiwKICAgICJEdXRjaCI6ICJubGQiLAogICAgIk5vcndlZ2lhbiBOeW5vcnNrIjogIm5ubyIsCiAgICAiTm9yd2VnaWFuIEJva23DpWwiOiAibm9iIiwKICAgICJOZXBhbGkiOiAibnBpIiwKICAgICJOeWFuamEiOiAibnlhIiwKICAgICJPY2NpdGFuIjogIm9jaSIsCiAgICAiT2RpYSI6ICJvcnkiLAogICAgIlB1bmphYmkiOiAicGFuIiwKICAgICJTb3V0aGVybiBQYXNodG8iOiAicGJ0IiwKICAgICJXZXN0ZXJuIFBlcnNpYW4iOiAicGVzIiwKICAgICJQb2xpc2giOiAicG9sIiwKICAgICJQb3J0dWd1ZXNlIjogInBvciIsCiAgICAiUm9tYW5pYW4iOiAicm9uIiwKICAgICJSdXNzaWFuIjogInJ1cyIsCiAgICAiU2xvdmFrIjogInNsayIsCiAgICAiU2xvdmVuaWFuIjogInNsdiIsCiAgICAiU2hvbmEiOiAic25hIiwKICAgICJTaW5kaGkiOiAic25kIiwKICAgICJTb21hbGkiOiAic29tIiwKICAgICJTcGFuaXNoIjogInNwYSIsCiAgICAiU2VyYmlhbiI6ICJzcnAiLAogICAgIlN3ZWRpc2giOiAic3dlIiwKICAgICJTd2FoaWxpIjogInN3aCIsCiAgICAiVGFtaWwiOiAidGFtIiwKICAgICJUZWx1Z3UiOiAidGVsIiwKICAgICJUYWppayI6ICJ0Z2siLAogICAgIlRhZ2Fsb2ciOiAidGdsIiwKICAgICJUaGFpIjogInRoYSIsCiAgICAiVHVya2lzaCI6ICJ0dXIiLAogICAgIlVrcmFpbmlhbiI6ICJ1a3IiLAogICAgIlVyZHUiOiAidXJkIiwKICAgICJOb3J0aGVybiBVemJlayI6ICJ1em4iLAogICAgIlZpZXRuYW1lc2UiOiAidmllIiwKICAgICJYaG9zYSI6ICJ4aG8iLAogICAgIllvcnViYSI6ICJ5b3IiLAogICAgIkNhbnRvbmVzZSI6ICJ5dWUiLAogICAgIkNvbGxvcXVpYWwgTWFsYXkiOiAiemxtIiwKICAgICJTdGFuZGFyZCBNYWxheSI6ICJ6c20iLAogICAgIlp1bHUiOiAienVsIiwKfQoKCmNsYXNzIFRyYW5zbGF0aW9uQ29uZmlnKEJhc2VNb2RlbCk6CiAgICBtb2RlbF9uYW1lX29yX2NhcmQ6IFVuaW9uW3N0ciwgQW55XSA9ICJmYWNlYm9vay9zZWFtbGVzcy1NNFQtVjItbGFyZ2UiCiAgICB2b2NvZGVyX25hbWU6IHN0ciA9ICgKICAgICAgICAidm9jb2Rlcl92MiIKICAgICAgICBpZiBtb2RlbF9uYW1lX29yX2NhcmQgPT0gImZhY2Vib29rL3NlYW1sZXNzLU00VC1WMi1sYXJnZSIKICAgICAgICBlbHNlICJ2b2NvZGVyXzM2bGFuZ3MiCiAgICApCiAgICBkZXZpY2U6IEFueSA9IHRvcmNoLmRldmljZShkZXZpY2U9ImN1ZGE6MCIpCiAgICB0ZXh0X3Rva2VuaXplcjogc3RyID0gbW9kZWxfbmFtZV9vcl9jYXJkCiAgICBhcHBseV9taW50b3g6IGJvb2wgPSAoVHJ1ZSwpCiAgICBkdHlwZTogQW55ID0gKHRvcmNoLmZsb2F0MTYsKQogICAgaW5wdXRfbW9kYWxpdHk6IE9wdGlvbmFsW0FueV0gPSAoTm9uZSwpCiAgICBvdXRwdXRfbW9kYWxpdHk6IE9wdGlvbmFsW0FueV0gPSBOb25lCgoKY2xhc3MgVHJhbnNsYXRpb25EYXRhKEJhc2VNb2RlbCk6CiAgICBpbnB1dDogc3RyCiAgICB0YXNrX3N0cmluZzogc3RyCiAgICBzb3VyY2VfbGFuZ3VhZ2U6IE9wdGlvbmFsW3N0cl0gPSBOb25lCiAgICB0YXJnZXRfbGFuZ3VhZ2U6IHN0cgogICAgCiAgICAKY2xhc3MgVHJhbnNsYXRpb25SZXF1ZXN0KE1pbmVyUmVxdWVzdCk6CiAgICBkZWYgX19pbml0X18oc2VsZiwgZGF0YTogVHJhbnNsYXRpb25EYXRhKToKICAgICAgICBzdXBlcigpLl9faW5pdF9fKCkKICAgICAgICBzZWxmLmRhdGEgPSBkYXRhCgogICAKX19hbGxfXyA9IFsKICAgICJUcmFuc2xhdGlvbkNvbmZpZyIsCiAgICAiVHJhbnNsYXRpb25EYXRhIiwKICAgICJUcmFuc2xhdGlvblJlcXVlc3QiLAogICAgIlRBUkdFVF9MQU5HVUFHRVMiLAogICAgIlRBU0tfU1RSSU5HUyIsCiAgICAiTWluZXJDb25maWciLAogICAgIk1vZHVsZUNvbmZpZyIsCiAgICAiQmFzZU1pbmVyIiwKICAgICJCYXNlTW9kdWxlIiwKICAgICJhcHAiLAogICAgIlNzNThLZXkiCl0='),
    ('__init__.py', ''),
    ('translation_module.py', 'aW1wb3J0IG9zCmltcG9ydCBpbwppbXBvcnQgYmFzZTY0CmZyb20gdHlwaW5nIGltcG9ydCBVbmlvbiwgT3B0aW9uYWwKZnJvbSBmYXN0YXBpIGltcG9ydCBIVFRQRXhjZXB0aW9uCmZyb20gZG90ZW52IGltcG9ydCBsb2FkX2RvdGVudgpmcm9tIGxvZ3VydSBpbXBvcnQgbG9nZ2VyCgpmcm9tIC5kYXRhX21vZGVscyBpbXBvcnQgVHJhbnNsYXRpb25SZXF1ZXN0LCBNaW5lckNvbmZpZywgTW9kdWxlQ29uZmlnLCBCYXNlTWluZXIsIFRyYW5zbGF0aW9uQ29uZmlnCmZyb20gLnRyYW5zbGF0aW9uIGltcG9ydCBUcmFuc2xhdGlvbgoKbG9hZF9kb3RlbnYoKQoKCm1vZHVsZV9zZXR0aW5ncyA9IE1vZHVsZUNvbmZpZygKICAgIG1vZHVsZV9wYXRoPW9zLmdldGVudigiTU9EVUxFX1BBVEgiKSwKICAgIG1vZHVsZV9uYW1lPW9zLmdldGVudigiTU9EVUxFX05BTUUiKSwKICAgIG1vZHVsZV9lbmRwb2ludD1vcy5nZXRlbnYoIk1PRFVMRV9FTkRQT0lOVCIpLAogICAgbW9kdWxlX3VybD0iaHR0cHM6Ly9odHRwOi8vbG9jYWxob3N0OjQyNjcvIgopCgptaW5lcl9zZXR0aW5ncyA9IE1pbmVyQ29uZmlnKAogICAgbWluZXJfbmFtZT1vcy5nZXRlbnYoIk1JTkVSX05BTUUiKSwKICAgIG1pbmVyX2tleXBhdGg9b3MuZ2V0ZW52KCJLRVlQQVRIX05BTUUiKSwKICAgIG1pbmVyX2hvc3Q9b3MuZ2V0ZW52KCJNSU5FUl9IT1NUIiksCiAgICBleHRlcm5hbF9hZGRyZXNzPW9zLmdldGVudigiRVhURVJOQUxfQUREUkVTUyIpLAogICAgbWluZXJfcG9ydD1vcy5nZXRlbnYoIk1JTkVSX1BPUlQiKSwKICAgIHN0YWtlPW9zLmdldGVudigiU1RBS0UiKSwKICAgIG5ldHVpZD1vcy5nZXRlbnYoIk5FVFVJRCIpLAogICAgZnVuZGluZ19rZXk9b3MuZ2V0ZW52KCJGVU5ESU5HX0tFWSIpLAogICAgZnVuZGluZ19tb2RpZmllcj1vcy5nZXRlbnYoIk1PRElGSUVSIiksCiAgICBtb2R1bGVfbmFtZT1vcy5nZXRlbnYoIk1PRFVMRV9OQU1FIikKKQp0cmFuc2xhdG9yID0gVHJhbnNsYXRpb24oVHJhbnNsYXRpb25Db25maWcoKSkKCgpjbGFzcyBUcmFuc2xhdGlvbk1pbmVyKEJhc2VNaW5lcik6CiAgICAKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIG1pbmVyX2NvbmZpZzogTWluZXJDb25maWcsCiAgICAgICAgbW9kdWxlX2NvbmZpZzogTW9kdWxlQ29uZmlnCiAgICApOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemVzIHRoZSBUcmFuc2xhdGlvbk1pbmVyIGNsYXNzIHdpdGggb3B0aW9uYWwgcm91dGUsIGlucGF0aCwgYW5kIG91dHBhdGggcGFyYW1ldGVycy4KICAgICAgICAKICAgICAgICBQYXJhbWV0ZXJzOgogICAgICAgICAgICBtaW5lcl9jb25maWcgKE1pbmVyQ29uZmlnKTogVGhlIHJvdXRlIGZvciB0aGUgdHJhbnNsYXRpb24uCiAgICAgICAgICAgIG1vZHVsZV9jb25maWcgKE1vZHVsZUNvbmZpZyk6IFRoZSBpbnB1dCBwYXRoIGZvciB0cmFuc2xhdGlvbi4KICAgICAgICAiIiIKICAgICAgICBzdXBlcigpLl9faW5pdF9fKG1pbmVyX2NvbmZpZywgbW9kdWxlX3NldHRpbmdzKSAgICAgICAgCiAgICAgICAgb3MubWFrZWRpcnMobW9kdWxlX2NvbmZpZy5tb2R1bGVfcGF0aCwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICBvcy5tYWtlZGlycyhmInttb2R1bGVfY29uZmlnLm1vZHVsZV9wYXRofS9pbiIsIGV4aXN0X29rPVRydWUpCiAgICAgICAgb3MubWFrZWRpcnMoZiJ7bW9kdWxlX2NvbmZpZy5tb2R1bGVfcGF0aH0vb3V0IiwgZXhpc3Rfb2s9VHJ1ZSkKICAgIAogICAgZGVmIHByb2Nlc3Moc2VsZiwgbWluZXJfcmVxdWVzdDogVHJhbnNsYXRpb25SZXF1ZXN0KSAtPiBVbmlvbltzdHIsIGJ5dGVzXToKICAgICAgICAiIiIKICAgICAgICBQcm9jZXNzZXMgdGhlIGdpdmVuIGBUcmFuc2xhdGlvblJlcXVlc3RgIG9iamVjdCBhbmQgcmV0dXJucyB0aGUgdHJhbnNsYXRpb24gcmVzdWx0LgoKICAgICAgICBQYXJhbWV0ZXJzOgogICAgICAgICAgICBtaW5lcl9yZXF1ZXN0IChUcmFuc2xhdGlvblJlcXVlc3QpOiBUaGUgcmVxdWVzdCBvYmplY3QgY29udGFpbmluZyB0aGUgaW5wdXQgZGF0YSwgdGFzayBzdHJpbmcsIHNvdXJjZSBsYW5ndWFnZSwgYW5kIHRhcmdldCBsYW5ndWFnZS4KCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgVW5pb25bc3RyLCBieXRlc106IFRoZSB0cmFuc2xhdGlvbiByZXN1bHQuCgogICAgICAgIFJhaXNlczoKICAgICAgICAgICAgSFRUUEV4Y2VwdGlvbjogSWYgYW4gZXJyb3Igb2NjdXJzIGR1cmluZyB0aGUgdHJhbnNsYXRpb24gcHJvY2Vzcy4KCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRvci5wcm9jZXNzKG1pbmVyX3JlcXVlc3QpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBwcm9jZXNzaW5nIHRyYW5zbGF0aW9uOiB7ZX0iKQogICAgICAgICAgICByYWlzZSBIVFRQRXhjZXB0aW9uKHN0YXR1c19jb2RlPTUwMCwgZGV0YWlsPWYiRXJyb3IgcHJvY2Vzc2luZyB0cmFuc2xhdGlvbjoge2V9IikgZnJvbSBlCiAgICAKICAgICAgICAKbWluZXIgPSBUcmFuc2xhdGlvbk1pbmVyKG1vZHVsZV9jb25maWc9bW9kdWxlX3NldHRpbmdzLCBtaW5lcl9jb25maWc9bWluZXJfc2V0dGluZ3MpCgptaW5lci5hZGRfcm91dGUobW9kdWxlX3NldHRpbmdzLm1vZHVsZV9uYW1lKQoKbWluZXIucnVuX3NlcnZlcihtaW5lcl9zZXR0aW5ncy5taW5lcl9ob3N0LCBtaW5lcl9zZXR0aW5ncy5taW5lcl9wb3J0KQo='),
    ('translation.py', ''),
    ('install_translation.sh', 'IyEvYmluL2Jhc2gKCnNldCAtZQoKc291cmNlIC4vLnZlbnYvYmluL2FjdGl2YXRlCgpweXRob24gLW0gcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcAoKcGlwIGluc3RhbGwgc2V0dXB0b29scyB3aGVlbCBnbnVyZWFkbGluZQpwaXAgaW5zdGFsbCBzbmRmaWxlIGdnbWwtcHl0aG9uIHN1YnN0cmF0ZS1pbnRlcmZhY2UgYml0dGVuc29yIGxvZ3VydQpwaXAgaW5zdGFsbCBmYXN0YXBpIHV2aWNvcm4gbG9ndXJ1IHJlcXVlc3RzIHN1YnN0cmF0ZS1pbnRlcmZhY2Ugc2VudGVuY2VwaWVjZSBwcm90b2J1ZgoKaWYgY29tbWFuZCAtdiBhcHQtZ2V0ID4vZGV2L251bGw7IHRoZW4KICAgIHN1ZG8gYXB0LWdldCB1cGRhdGUgJiYgc3VkbyBhcHQtZ2V0IHVwZ3JhZGUgLXkKICAgIHN1ZG8gYXB0LWdldCBpbnN0YWxsIHB5dGhvbjMgcHl0aG9uMy1kZXYgcHl0aG9uMy12ZW52IHB5dGhvbjMtcGlwIHB5dGhvbi1pcy1weXRob24zIGxpYnNuZGZpbGUxLWRldiBsaWJnbXAxMC1kZXYgLXkKZWxpZiBjb21tYW5kIC12IHBhY21hbiA+L2Rldi9udWxsOyB0aGVuCiAgICBzdWRvIHBhY21hbiAtU3l1IC0tbm9jb25maXJtCiAgICBzdWRvIHBhY21hbiAtUyBweXRob24gcHl0aG9uLXBpcCBweXRob24tdmlydHVhbGVudiBsaWJzbmRmaWxlIGdtcCAtLW5vY29uZmlybQplbHNlCiAgICBlY2hvICJUaGlzIHNjcmlwdCByZXF1aXJlcyBhIExpbnV4IGRpc3RyaWJ1dGlvbiB3aXRoIGVpdGhlciBhcHQgb3IgcGFjbWFuLiIKICAgIGV4aXQgMQpmaQoKaWYgWyAhIC1kICIuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MiIF07IHRoZW4KICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tyZXNlYXJjaC9zZWFtbGVzc19jb21tdW5pY2F0aW9uLmdpdCAuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKICAgIApmaQpwaXAgaW5zdGFsbCAuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKcGlwIGluc3RhbGwgZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMgdG9yY2ggdG9yY2hhdWRpbyB0b3JjaHZpc2lvbiBmYWlyc2VxMgoKbWtkaXIgLXAgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL2luCgpta2RpciAtcCAuL21vZHVsZXMvdHJhbnNsYXRpb24vb3V0Cg=='),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'wb') as f:
        f.write(base64.b64decode(encoded_content))
    print(f'Created: {full_path}')
command = ['bash', 'modules/translation/install_translation.sh']
subprocess.run(command, check=True)
