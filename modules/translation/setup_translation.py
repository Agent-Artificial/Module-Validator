import os
import base64
folder_path = f'modules/translation'

file_data = [
    ('translation_module.py', 'aW1wb3J0IGJhc2U2NApmcm9tIHB5ZGFudGljIGltcG9ydCBGaWVsZApmcm9tIGRvdGVudiBpbXBvcnQgbG9hZF9kb3RlbnYKCmZyb20gLmRhdGFfbW9kZWxzIGltcG9ydCBUcmFuc2xhdGlvblJlcXVlc3QsIE1pbmVyQ29uZmlnLCBNb2R1bGVDb25maWcsIEJhc2VNaW5lcgpmcm9tIC50cmFuc2xhdGlvbiBpbXBvcnQgU2VhbWxlc3NUcmFuc2xhdG9yCgoKbG9hZF9kb3RlbnYoKQoKdHJhbnNsYXRvciA9IFNlYW1sZXNzVHJhbnNsYXRvcigpCgoKdHJhbnNsYXRpb25fc2V0dGluZ3MgPSBNb2R1bGVDb25maWcoCiAgICBtb2R1bGVfcGF0aD0ibW9kdWxlL3RyYW5zbGF0aW9uIiwKICAgIG1vZHVsZV9uYW1lPSJ0cmFuc2xhdGlvbiIsCiAgICBtb2R1bGVfZW5kcG9pbnQ9Ii9tb2R1bGVzL3RyYW5zbGF0aW9uIiwKICAgIG1vZHVsZV91cmw9Imh0dHBzOi8vdHJhbnNsYXRpb24uY29tLyIKKQoKbWluZXJfc2V0dGluZ3MgPSBNaW5lckNvbmZpZygKICAgIG1vZHVsZV9uYW1lPUZpZWxkKGRlZmF1bHQ9InRyYW5zbGF0aW9uIiksCiAgICBtb2R1bGVfcGF0aD1GaWVsZChkZWZhdWx0PSJtb2R1bGVzL3RyYW5zbGF0aW9uIiksCiAgICBtb2R1bGVfZW5kcG9pbnQ9RmllbGQoZGVmYXVsdD0iL21vZHVsZXMvdHJhbnNsYXRpb24iKSwKICAgIG1vZHVsZV91cmw9RmllbGQoZGVmYXVsdD0iaHR0cHM6Ly90cmFuc2xhdGlvbi5jb20vIiksCiAgICBtaW5lcl9rZXlfZGljdD17CiAgICAgICAgInRlc3RfbWluZXJfMSI6IHsKICAgICAgICAgICAgImtleSI6ICI1R04yZExoV2E1c0NCNEE1NThCa2toOTZCTmR3d2lrUHhDQkpXNkhRWG1RZjd5cFIiLAogICAgICAgICAgICAibmFtZSI6ICJ0ZXN0X21pbmVyXzEiLAogICAgICAgICAgICAiaG9zdCI6ICIwLjAuMC4wIiwKICAgICAgICAgICAgInBvcnQiOiA4MDAwLAogICAgICAgICAgICAia2V5cGF0aCI6ICIkSE9NRS8uY29tbXVuZS9rZXkvdGVzdF9taW5lcl8xLmpzb24iCiAgICAgICAgfQogICAgfSwKKQoKY2xhc3MgVHJhbnNsYXRpb25NaW5lcihCYXNlTWluZXIpOgogICAgCiAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhtaW5lcl9zZXR0aW5ncywgdHJhbnNsYXRpb25fc2V0dGluZ3MpCiAgICAgICAgc2VsZi5hZGRfcm91dGUoInRyYW5zbGF0aW9uIikKICAgIAogICAgZGVmIHByb2Nlc3Moc2VsZiwgcmVxdWVzdDogVHJhbnNsYXRpb25SZXF1ZXN0KToKICAgICAgICB0ZXh0X3JlcXVlc3QgPSAibW9kdWxlcy90cmFuc2xhdGlvbi9pbi90ZXh0X3JlcXVlc3QudHh0IgogICAgICAgIGF1ZGlvX3JlcXVlc3QgPSAibW9kdWxlcy90cmFuc2xhdGlvbi9pbi9hdWRpb19yZXF1ZXN0LndhdiIKICAgICAgICByZXF1ZXN0X3BhdGggPSAiIgogICAgICAgIGlmIHJlcXVlc3QuZGF0YVsidGFza19zdHJpbmciXS5zdGFydHN3aXRoKCJzcGVlY2giKToKICAgICAgICAgICAgd2l0aCBvcGVuKGF1ZGlvX3JlcXVlc3QsICJ3YiIpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKGJhc2U2NC5iNjRkZWNvZGUocmVxdWVzdC5kYXRhWyJpbnB1dCJdLmVuY29kZSgidXRmLTgiKSkpCiAgICAgICAgICAgIHJlcXVlc3RfcGF0aCA9IGF1ZGlvX3JlcXVlc3QKICAgICAgICBpZiByZXF1ZXN0LmRhdGFbInRhc2tfc3RyaW5nIl0uc3RhcnRzd2l0aCgidGV4dCIpOgogICAgICAgICAgICB3aXRoIG9wZW4odGV4dF9yZXF1ZXN0LCAidyIsIGVuY29kaW5nPSJ1dGYtOCIpIGFzIGY6CiAgICAgICAgICAgICAgICBmLndyaXRlKHJlcXVlc3QuZGF0YVsiaW5wdXQiXSkKICAgICAgICAgICAgcmVxdWVzdF9wYXRoID0gdGV4dF9yZXF1ZXN0CiAgICAgICAgb3V0cHV0X3RleHQsIG91dHB1dF9hdWRpbyA9IHRyYW5zbGF0b3IudHJhbnNsYXRpb25faW5mZXJlbmNlKAogICAgICAgICAgICBpbl9maWxlPXJlcXVlc3RfcGF0aCwKICAgICAgICAgICAgc291cmNlX2xhbmdhdWdlPXJlcXVlc3QuZGF0YVsic291cmNlX2xhbmd1YWdlIl0udGl0bGUoKSwKICAgICAgICAgICAgdGFyZ2V0X2xhbmd1YWdlcz1bcmVxdWVzdC5kYXRhWyJ0YXJnZXRfbGFuZ3VhZ2UiXS50aXRsZSgpXSwKICAgICAgICAgICAgdGFza19zdHJpbmc9cmVxdWVzdC5kYXRhWyJ0YXNrX3N0cmluZyJdCiAgICAgICAgKQogICAgICAgIGlmIHJlcXVlc3QuZGF0YVsidGFza19zdHJpbmciXS5lbmRzd2l0aCgiMnNwZWVjaCIpOgogICAgICAgICAgICByZXR1cm4gYmFzZTY0LmI2NGVuY29kZShvdXRwdXRfYXVkaW8pLmRlY29kZSgidXRmLTgiKQogICAgICAgIGlmIHJlcXVlc3QuZGF0YVsidGFza19zdHJpbmciXS5lbmRzd2l0aCgiMnRleHQiKToKICAgICAgICAgICAgcmV0dXJuIHN0cihvdXRwdXRfdGV4dCkKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWluZXIgPSBUcmFuc2xhdGlvbk1pbmVyKCkKICAgICMgd2l0aCBvcGVuKCJtb2R1bGVzL3RyYW5zbGF0aW9uL2luL2dlcm1hbl90ZXN0X2RhdGEud2F2IiwgInJiIikgYXMgZjoKICAgICMgICAgIGF1ZGlvX2RhdGEgPSBmLnJlYWQoKQogICAgIyBiNjRhdWRpbyA9IGJhc2U2NC5iNjRlbmNvZGUoYXVkaW9fZGF0YSkuZGVjb2RlKCJ1dGYtOCIpCiAgICAjIHRyYW5zbGF0aW9uX2RhdGEgPSBUcmFuc2xhdGlvbkRhdGEoCiAgICAjICAgICBpbnB1dD1iNjRhdWRpbywKICAgICMgICAgIHRhc2tfc3RyaW5nPSJzcGVlY2gydGV4dCIsCiAgICAjICAgICBzb3VyY2VfbGFuZ3VhZ2U9ImVuZ2xpc2giLAogICAgIyAgICAgdGFyZ2V0X2xhbmd1YWdlPSJmcmVuY2giCiAgICAjICkubW9kZWxfZHVtcCgpCiAgICAjIHRyYW5zbGF0aW9uX3JlcXVlc3QgPSBUcmFuc2xhdGlvblJlcXVlc3QoCiAgICAjICAgICBkYXRhPXRyYW5zbGF0aW9uX2RhdGEKICAgICMgKQogICAgIyByZXN1bHQgPSBtaW5lci5wcm9jZXNzKHJlcXVlc3Q9dHJhbnNsYXRpb25fcmVxdWVzdCkKICAgICMgcHJpbnQocmVzdWx0KQogICAgbWluZXIucnVuX3NlcnZlcigiMC4wLjAuMCIsIDQyNjkp'),
    ('translation.py', 'aW1wb3J0IHRvcmNoYXVkaW8KaW1wb3J0IHRvcmNoCgpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKCmZyb20gbG9ndXJ1IGltcG9ydCBsb2dnZXIKZnJvbSB0eXBpbmcgaW1wb3J0IFVuaW9uLCBUdXBsZSwgTGlzdCwgRGljdCwgT3B0aW9uYWwKCmZyb20gLnNlYW1sZXNzLnNyYy5zZWFtbGVzc19jb21tdW5pY2F0aW9uLmluZmVyZW5jZS50cmFuc2xhdG9yIGltcG9ydCBUcmFuc2xhdG9yCmZyb20gLmRhdGFfbW9kZWxzIGltcG9ydCBUQVJHRVRfTEFOR1VBR0VTLCBUQVNLX1NUUklOR1MKCgpjbGFzcyBTZWFtbGVzc1RyYW5zbGF0b3I6CiAgICAiIiJBIGNsYXNzIGZvciBwZXJmb3JtaW5nIHRyYW5zbGF0aW9uIHRhc2tzIHVzaW5nIGEgc3BlY2lmaWVkIG1vZGVsIGFuZCB2b2NvZGVyLgoKICAgIEF0dHJpYnV0ZXM6CiAgICAgICAgbW9kZWxfbmFtZSAoc3RyKTogVGhlIG5hbWUgb2YgdGhlIHRyYW5zbGF0aW9uIG1vZGVsLgogICAgICAgIHZvY29kZXJfbmFtZSAoc3RyKTogVGhlIG5hbWUgb2YgdGhlIHZvY29kZXIuCiAgICAgICAgdHJhbnNsYXRvciAoVHJhbnNsYXRvcik6IFRoZSB0cmFuc2xhdG9yIG9iamVjdC4KICAgICAgICB0YXJnZXRfbGFuZ3VhZ2VzIChEaWN0W3N0ciwgc3RyXSk6IEEgZGljdGlvbmFyeSBtYXBwaW5nIGxhbmd1YWdlIG5hbWVzIHRvIGxhbmd1YWdlIGNvZGVzLgogICAgICAgIHRhc2tfc3RyaW5ncyAoRGljdFtzdHIsIHN0cl0pOiBBIGRpY3Rpb25hcnkgbWFwcGluZyB0YXNrIHN0cmluZ3MgdG8gYWJicmV2aWF0aW9ucy4KCiAgICBBcmdzOgogICAgICAgIGluX2ZpbGUgKFVuaW9uW3N0ciwgUGF0aF0pOiBUaGUgaW5wdXQgZmlsZSBmb3IgdHJhbnNsYXRpb24uCiAgICAgICAgdGFza19zdHJpbmcgKHN0cik6IFRoZSB0eXBlIG9mIHRyYW5zbGF0aW9uIHRhc2suCiAgICAgICAgdGFyZ2V0X2xhbmd1YWdlcyAoTGlzdFtzdHJdKTogVGhlIHRhcmdldCBsYW5ndWFnZXMgZm9yIHRyYW5zbGF0aW9uLgoKICAgIFJldHVybnM6CiAgICAgICAgVHVwbGVbUGF0aCwgUGF0aF0gfCBOb25lOiBBIHR1cGxlIGNvbnRhaW5pbmcgdGhlIHBhdGhzIHRvIHRoZSB0cmFuc2xhdGVkIHRleHQgYW5kIGF1ZGlvIGZpbGVzLCBvciBOb25lIGlmIHRyYW5zbGF0aW9uIGZhaWxzLgogICAgIiIiCgogICAgbW9kZWxfbmFtZTogc3RyCiAgICB2b2NvZGVyX25hbWU6IHN0cgogICAgdHJhbnNsYXRvcjogVHJhbnNsYXRvcgogICAgdGFyZ2V0X2xhbmd1YWdlczogRGljdFtzdHIsIHN0cl0KICAgIHRhc2tfc3RyaW5nczogRGljdFtzdHIsIHN0cl0KCiAgICBkZWYgX19pbml0X18oc2VsZikgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBJbml0aWFsaXplcyB0aGUgU2VhbWxlc3NUcmFuc2xhdG9yIG9iamVjdCB3aXRoIHRoZSBzcGVjaWZpZWQgbW9kZWwgYW5kIHZvY29kZXIgbmFtZXMsCiAgICAgICAgYW5kIGNyZWF0ZXMgYSB0cmFuc2xhdG9yIG9iamVjdCB1c2luZyB0aGUgc3BlY2lmaWVkIG1vZGVsIGFuZCB2b2NvZGVyLiBUaGUgdHJhbnNsYXRvcgogICAgICAgIG9iamVjdCBpcyBjcmVhdGVkIHdpdGggdGhlIGRldmljZSBzZXQgdG8gImN1ZGE6MCIgYW5kIHRoZSBkYXRhIHR5cGUgc2V0IHRvICJ0b3JjaC5mbG9hdDE2Ii4KICAgICAgICBUaGUgdGFyZ2V0X2xhbmd1YWdlcyBkaWN0aW9uYXJ5IG1hcHMgbGFuZ3VhZ2UgbmFtZXMgdG8gbGFuZ3VhZ2UgY29kZXMsIGFuZCB0aGUgdGFza19zdHJpbmdzCiAgICAgICAgZGljdGlvbmFyeSBtYXBzIHRhc2sgc3RyaW5ncyB0byBhYmJyZXZpYXRpb25zLgogICAgICAgICIiIgogICAgICAgIHNlbGYubW9kZWxfbmFtZSA9ICJzZWFtbGVzc000VF92Ml9sYXJnZSIKICAgICAgICBzZWxmLnZvY29kZXJfbmFtZSA9ICgKICAgICAgICAgICAgInZvY29kZXJfdjIiCiAgICAgICAgICAgIGlmIHNlbGYubW9kZWxfbmFtZSA9PSAic2VhbWxlc3NNNFRfdjJfbGFyZ2UiCiAgICAgICAgICAgIGVsc2UgInZvY29kZXJfMzZsYW5ncyIKICAgICAgICApCgogICAgICAgIHNlbGYudHJhbnNsYXRvciA9IFRyYW5zbGF0b3IoCiAgICAgICAgICAgIG1vZGVsX25hbWVfb3JfY2FyZD1zZWxmLm1vZGVsX25hbWUsCiAgICAgICAgICAgIHZvY29kZXJfbmFtZV9vcl9jYXJkPXNlbGYudm9jb2Rlcl9uYW1lLAogICAgICAgICAgICBkZXZpY2U9dG9yY2guZGV2aWNlKGRldmljZT0iY3VkYTowIiksCiAgICAgICAgICAgIGR0eXBlPXRvcmNoLmZsb2F0MTYsCiAgICAgICAgKQogICAgICAgIHNlbGYudGFza19zdHJpbmdzID0gVEFTS19TVFJJTkdTCiAgICAgICAgc2VsZi50YXJnZXRfbGFuZ3VhZ2VzID0gVEFSR0VUX0xBTkdVQUdFUwogICAgICAgIAoKICAgIGRlZiB0cmFuc2xhdGlvbl9pbmZlcmVuY2UoCiAgICAgICAgc2VsZiwKICAgICAgICBpbl9maWxlOiBVbmlvbltzdHIsIFBhdGhdLAogICAgICAgIHRhc2tfc3RyaW5nOiBzdHIgPSAic3BlZWNoMnRleHQiLAogICAgICAgIHNvdXJjZV9sYW5nYXVnZTogT3B0aW9uYWxbc3RyXSA9ICJlbmdsaXNoIiwKICAgICAgICB0YXJnZXRfbGFuZ3VhZ2VzOiBMaXN0W3N0cl0gPSBbIkVuZ2xpc2giXSwKICAgICkgLT4gVHVwbGVbUGF0aCwgUGF0aF0gfCBOb25lOgogICAgICAgICIiIgogICAgICAgIFBlcmZvcm0gdHJhbnNsYXRpb24gaW5mZXJlbmNlIG9uIHRoZSBnaXZlbiBpbnB1dCBmaWxlLgoKICAgICAgICBBcmdzOgogICAgICAgICAgICBpbl9maWxlIChVbmlvbltzdHIsIFBhdGhdKTogVGhlIHBhdGggdG8gdGhlIGlucHV0IGZpbGUuCiAgICAgICAgICAgIHRhc2tfc3RyaW5nIChzdHIsIG9wdGlvbmFsKTogVGhlIHRhc2sgc3RyaW5nLiBEZWZhdWx0cyB0byAiczJzdCIuCiAgICAgICAgICAgIHRhcmdldF9sYW5ndWFnZXMgKExpc3Rbc3RyXSwgb3B0aW9uYWwpOiBUaGUgbGlzdCBvZiB0YXJnZXQgbGFuZ3VhZ2VzLiBEZWZhdWx0cyB0byBbImVuZyJdLgoKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBUdXBsZVtQYXRoLCBQYXRoXSB8IE5vbmU6IEEgdHVwbGUgY29udGFpbmluZyB0aGUgYWJzb2x1dGUgcGF0aHMgdG8gdGhlIG91dHB1dCB0ZXh0IGZpbGUgYW5kIG91dHB1dCBhdWRpbyBmaWxlLCBvciBOb25lIGlmIHRoZSBpbnB1dCBmaWxlIGlzIG5vdCBmb3VuZC4KCiAgICAgICAgUmFpc2VzOgogICAgICAgICAgICBGaWxlTm90Rm91bmRFcnJvcjogSWYgdGhlIGlucHV0IGZpbGUgaXMgbm90IGZvdW5kLgogICAgICAgICAgICBWYWx1ZUVycm9yOiBJZiB0aGUgdGFzayBzdHJpbmcgb3IgdGFyZ2V0IGxhbmd1YWdlIGlzIGludmFsaWQuCgogICAgICAgICIiIgoKICAgICAgICBpZiBub3QgUGF0aChpbl9maWxlKS5leGlzdHMoKToKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGYiRmlsZSB7aW5fZmlsZX0gbm90IGZvdW5kIikKICAgICAgICAgICAgcmFpc2UgRmlsZU5vdEZvdW5kRXJyb3IoZiJGaWxlIHtpbl9maWxlfSBub3QgZm91bmQiKQoKICAgICAgICBpbnB1dF9maWxlID0gUGF0aChpbl9maWxlKQogICAgICAgIG91dHB1dF90ZXh0ID0gUGF0aChmIm1vZHVsZXMvdHJhbnNsYXRpb24vb3V0L3tpbnB1dF9maWxlLnN0ZW19LnR4dCIpCiAgICAgICAgb3V0cHV0X2F1ZGlvID0gUGF0aChmIm1vZHVsZXMvdHJhbnNsYXRpb24vb3V0L3tpbnB1dF9maWxlLnN0ZW19LndhdiIpCiAgICAgICAgCiAgICAgICAgdGFza19zdHI6IHN0ciA9IHNlbGYudGFza19zdHJpbmdzW3Rhc2tfc3RyaW5nXQogICAgICAgIGlmIG5vdCB0YXNrX3N0cjoKICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJJbnZhbGlkIHRhc2sgc3RyaW5nIikKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiSW52YWxpZCB0YXNrIHN0cmluZyIpCgogICAgICAgIGZvciB0Z3RfbGFuZyBpbiB0YXJnZXRfbGFuZ3VhZ2VzOgoKICAgICAgICAgICAgdGd0X2xhbmc6IHN0ciA9IHNlbGYudGFyZ2V0X2xhbmd1YWdlc1t0Z3RfbGFuZ10KICAgICAgICAgICAgaWYgbm90IHRndF9sYW5nOgogICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCJJbnZhbGlkIHRhcmdldCBsYW5ndWFnZSIpCiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJJbnZhbGlkIHRhcmdldCBsYW5ndWFnZSIpCgogICAgICAgICAgICBpZiB0YXNrX3N0ci5zdGFydHN3aXRoKCJ0Iik6CiAgICAgICAgICAgICAgICB0ZXh0X291dHB1dCwgc3BlZWNoX291dHB1dCA9IHNlbGYudHJhbnNsYXRvci5wcmVkaWN0KAogICAgICAgICAgICAgICAgICAgIGlucHV0PXN0cihpbnB1dF9maWxlLnJlYWRfdGV4dChlbmNvZGluZz0idXRmLTgiKSksCiAgICAgICAgICAgICAgICAgICAgdGFza19zdHI9dGFza19zdHIsCiAgICAgICAgICAgICAgICAgICAgc3JjX2xhbmc9c2VsZi50YXJnZXRfbGFuZ3VhZ2VzW3NvdXJjZV9sYW5nYXVnZV0sCiAgICAgICAgICAgICAgICAgICAgdGd0X2xhbmc9dGd0X2xhbmcsCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICBpZiB0YXNrX3N0ci5zdGFydHN3aXRoKCJzIik6CiAgICAgICAgICAgICAgICB0ZXh0X291dHB1dCwgc3BlZWNoX291dHB1dCA9IHNlbGYudHJhbnNsYXRvci5wcmVkaWN0KAogICAgICAgICAgICAgICAgICAgIGlucHV0PXN0cihpbnB1dF9maWxlKSwKICAgICAgICAgICAgICAgICAgICB0YXNrX3N0cj10YXNrX3N0ciwKICAgICAgICAgICAgICAgICAgICBzcmNfbGFuZz1zZWxmLnRhcmdldF9sYW5ndWFnZXNbc291cmNlX2xhbmdhdWdlXSwKICAgICAgICAgICAgICAgICAgICB0Z3RfbGFuZz10Z3RfbGFuZywKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZiJUcmFuc2xhdGVkIHRleHQgaW4ge3RndF9sYW5nfToge3RleHRfb3V0cHV0WzBdfSIpCgogICAgICAgICAgICBpZiBzcGVlY2hfb3V0cHV0OgogICAgICAgICAgICAgICAgdG9yY2hhdWRpby5zYXZlKAogICAgICAgICAgICAgICAgICAgIHVyaT1vdXRwdXRfYXVkaW8sCiAgICAgICAgICAgICAgICAgICAgc3JjPXNwZWVjaF9vdXRwdXQuYXVkaW9fd2F2c1swXVswXS50byh0b3JjaC5mbG9hdDMyKS5jcHUoKSwKICAgICAgICAgICAgICAgICAgICBzYW1wbGVfcmF0ZT1zcGVlY2hfb3V0cHV0LnNhbXBsZV9yYXRlLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICBpZiB0ZXh0X291dHB1dDoKICAgICAgICAgICAgICAgIG91dHB1dF90ZXh0LndyaXRlX3RleHQoCiAgICAgICAgICAgICAgICAgICAgZGF0YT1zdHIob2JqZWN0PXRleHRfb3V0cHV0WzBdKSwgZW5jb2Rpbmc9InV0Zi04IgogICAgICAgICAgICAgICAgKQoKICAgICAgICAgICAgbG9nZ2VyLmluZm8oIlRyYW5zbGF0ZWQgdGFyZ2V0IGZpbGUiKQoKICAgICAgICAgICAgcmV0dXJuIHRleHRfb3V0cHV0LCBzcGVlY2hfb3V0cHV0CgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIHRyYW5zbGF0b3IgPSBTZWFtbGVzc1RyYW5zbGF0b3IoKQogICAgdHJhbnNsYXRvci50cmFuc2xhdGlvbl9pbmZlcmVuY2UoCiAgICAgICAgaW5fZmlsZT0ibW9kdWxlcy90cmFuc2xhdGlvbi9pbi9hdWRpb19yZXF1ZXN0LndhdiIsCiAgICAgICAgdGFza19zdHJpbmc9InNwZWVjaDJzcGVlY2giLAogICAgICAgIHRhcmdldF9sYW5ndWFnZXM9WyJGcmVuY2giXQogICAgKQ=='),
    ('__init__.py', ''),
    ('data_models.py', ''),
    ('install_translation.sh', 'IyEvYmluL2Jhc2gKCnNldCAtZQoKc291cmNlIC4vLnZlbnYvYmluL2FjdGl2YXRlCgpweXRob24gLW0gcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcAoKcGlwIGluc3RhbGwgc2V0dXB0b29scyB3aGVlbCBnbnVyZWFkbGluZQpwaXAgaW5zdGFsbCBzbmRmaWxlIGdnbWwtcHl0aG9uIHN1YnN0cmF0ZS1pbnRlcmZhY2UgY29tbXVuZXggbG9ndXJ1CgpzdWRvIGFwdC1nZXQgdXBkYXRlICYmIHN1ZG8gYXB0LWdldCB1cGdyYWRlIC15CnN1ZG8gYXB0LWdldCBpbnN0YWxsIGxpYnNuZGZpbGUxLWRldiAteQoKaWYgWyAhIC1kICIuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MiIF07IHRoZW4KICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tyZXNlYXJjaC9zZWFtbGVzc19jb21tdW5pY2F0aW9uLmdpdCAuL21vZHVsZXMvdHJhbnNsYXRpb24vc2VhbWxlc3MKICAgIHBpcCBpbnN0YWxsIC4vbW9kdWxlcy90cmFuc2xhdGlvbi9zZWFtbGVzcwpmaQoKcGlwIGluc3RhbGwgLi9tb2R1bGVzL3RyYW5zbGF0aW9uL3NlYW1sZXNzCgpwaXAgaW5zdGFsbCBnaXQraHR0cHM6Ly9naXRodWIuY29tL2h1Z2dpbmdmYWNlL3RyYW5zZm9ybWVycyB0b3JjaCB0b3JjaGF1ZGlvIHRvcmNodmlzaW9uIGZhaXJzZXEyCgpta2RpciAtcCAuL21vZHVsZXMvdHJhbnNsYXRpb24vaW4KCm1rZGlyIC1wIC4vbW9kdWxlcy90cmFuc2xhdGlvbi9vdXQKCg=='),
]

for relative_path, encoded_content in file_data:
    full_path = os.path.join(folder_path, relative_path)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(full_path, 'wb') as f:
        f.write(base64.b64decode(encoded_content))
    print(f'Created: {full_path}')
